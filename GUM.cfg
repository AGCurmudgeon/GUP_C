[gcode_macro _MAIN_VARIABLES]

variable_center_x: 175
variable_center_y: 175
variable_brush_x_max: 80
variable_brush_x: 75
variable_brush_x_min: 70
variable_brush_y_max:358
variable_brush_y: 355
variable_brush_y_min:350
variable_brush_z: 1
variable_bucket_x: 90
variable_bucket_y: 355
variable_temp_probe: 170

#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set x_center = printer["gcode_macro _MAIN_VARIABLES"].center_x|float %}
  {% set y_center = printer["gcode_macro _MAIN_VARIABLES"].center_y|float %}
  {% set x_bucket = printer["gcode_macro _MAIN_VARIABLES"].bucket_x|float %}
  {% set y_bucket = printer["gcode_macro _MAIN_VARIABLES"].bucket_y|float %}
  {% set x_brush_max = printer["gcode_macro _MAIN_VARIABLES"].brush_x_max|float %}
  {% set y_brush_max = printer["gcode_macro _MAIN_VARIABLES"].brush_y_max|float %}
  {% set x_brush_min = printer["gcode_macro _MAIN_VARIABLES"].brush_x_min|float %}
  {% set y_brush_min = printer["gcode_macro _MAIN_VARIABLES"].brush_y_min|float %}
  {% set x_brush = printer["gcode_macro _MAIN_VARIABLES"].brush_x|float %}
  {% set y_brush = printer["gcode_macro _MAIN_VARIABLES"].brush_y|float %}
  {% set probe_temp = printer["gcode_macro _MAIN_VARIABLES"].temp_probe|float %}

  SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)
  SET_PIN PIN=nevermore VALUE=1 
  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  
  SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
  STATUS_HEATING                                      # Set LEDs to heating-mode
  G1 X{x_bucket} Y{y_bucket} Z15 F9000                    # Go to center of the bucket
  M190 S{target_bed}                                  # Set the target temp for the bed
  SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
  G4 P240000                                          # Wait 5 min for the bedtemp to stabilize
  # Heat hotend to probe temp c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Probe: {probe_temp}"                   # Display info on display
  M109 S{probe_temp}                                           # Heat hotend to probe temp
  G4 P60000


  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  G28 Z                                                # Home Z again after QGL
  
  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
  
  G1 X{x_bucket} Y{y_bucket} Z15 F9000                    # Go to center of the bucket
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp
  FULL_UNRETRACT
  FULL_UNRETRACT
  M104 S{probe_temp}
  
  G4 S20
  
  G1 X{x_brush} Y{y_brush} Z1 F9000
  G1 X{x_brush_max} Z1 F9000
  G1 X{x_brush_min} Z1 F9000
  G1 X{x_brush_max} Z1 F9000
  G1 X{x_brush_min} Z1 F9000
  G1 X{x_brush_max} Z1 F9000
  G1 X{x_brush_min} Z1 F9000
  G1 X{x_brush} Y{y_brush} Z1 F9000
  G1 Y{y_brush_max} Z1 F9000
  G1 Y{y_brush_min} Z1 F9000
  G1 Y{y_brush_max} Z1 F9000
  G1 Y{y_brush_min} Z1 F9000
  G1 Y{y_brush_max} Z1 F9000
  G1 Y{y_brush_min} Z1 F9000

  G1 X{x_center} Y{y_center} Z15 F9000 

  CARTOGRAPHER_TOUCH                                    # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                  
#-------------------------#
#   PRIMARY               #
#-------------------------#

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
description: Pause the print and park
variable_etemp: 0
gcode:
    {% if printer.pause_resume.is_paused %}
        RESPOND MSG="Print is already paused"
    {% else %}
        SAVE_GCODE_STATE NAME=PAUSE_state
        RESPOND MSG="PAUSE"
        FULL_RETRACT
        BASE_PAUSE
        PARK
        SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
        M104 S0
        SET_IDLE_TIMEOUT TIMEOUT=36000
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% if not printer.pause_resume.is_paused %}
        RESPOND MSG="Print is not paused. Resume ignored"
    {% else %}
        M109 S{printer["gcode_macro PAUSE"].etemp} ; wait for hotend to heat back up
        FULL_UNRETRACT
        RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=100
        SET_IDLE_TIMEOUT TIMEOUT=3600
        RESPOND MSG="UNPAUSE"
        BASE_RESUME
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    PARK
    FULL_RETRACT
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    SET_IDLE_TIMEOUT TIMEOUT=3600
    M107
    M400
    CLEAR_PAUSE
    BED_MESH_CLEAR
    SDCARD_RESET_FILE
    FILAMENT_ON
    BASE_CANCEL_PRINT
    
[gcode_macro END_PRINT]
gcode:
    PARK
    FULL_RETRACT
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    SET_IDLE_TIMEOUT TIMEOUT=3600
    M107
    M400
    BED_MESH_CLEAR
    # If a filament sensor is connected, re-enable it in case it was disabled during printing
    FILAMENT_ON
    M107

#-------------------------#
#        HELPERS          #
#-------------------------#

[gcode_macro FILAMENT_ON]
gcode:
    SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
    SET_FILAMENT_SENSOR SENSOR="switch_sensor" ENABLE=1 

[gcode_macro FILAMENT_OFF]
gcode:
    SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
    SET_FILAMENT_SENSOR SENSOR="switch_sensor" ENABLE=0 


#-------------------------#
#        ACTIONS          #
#-------------------------#
[gcode_macro FULL_RETRACT]
gcode:
        {% elif printer.extruder.can_extrude %}
            G92 E0
            G1 E-20 F2100
        {% endif %}

[gcode_macro FULL_UNRETRACT]
gcode:
        {% elif printer.extruder.can_extrude %}
            G92 E0
            G1 E24 F2100
        {% endif %}
        
[gcode_macro belt_check]
gcode:
    M106 S128
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=65
    quad_gantry_level
    G0 X175 Y175 Z20
    COMPARE_BELTS_RESPONSES
    SET_STEPPER_ENABLE stepper=stepper_x ENABLE=0
    SET_STEPPER_ENABLE stepper=stepper_y ENABLE=0

[gcode_macro shaper_check]
gcode:
    M106 S128
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=65
    quad_gantry_level
    G0 X175 Y175 Z20
    AXES_SHAPER_CALIBRATION       

[gcode_macro SHAPER_CHECK]
gcode:
    M106 S128
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=65
    quad_gantry_level
    G0 X175 Y175 Z20
    AXES_SHAPER_CALIBRATION

[gcode_macro BELT_CHECK]
gcode:
    M106 S128
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=65
    quad_gantry_level
    G0 X175 Y175 Z20
    COMPARE_BELTS_RESPONSES
    SET_STEPPER_ENABLE stepper=stepper_x ENABLE=0
    SET_STEPPER_ENABLE stepper=stepper_y ENABLE=0

[gcode_macro VIBE_CHECK]
gcode:
    BELT_CHECK
    SHAPER_CHECK
    CREATE_VIBRATIONS_PROFILE

#-------------------------#
#        BACKUP           #
#-------------------------#

[gcode_macro UPDATE_GIT]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True
